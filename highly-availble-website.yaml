Parameters:
  KeyName:
    Description: 'Example Key Pair'
    Type: 'AWS::EC2::KeyPair::KeyName' # example key pair is ha_website
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: 'default'
      Tags:
        -
          Key: 'Name'
          Value: 'Highly Available Website'
  CustomRouteTablePrivate:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  CustomRouteTablePublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        Ref: VPC
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  GatewayToInternet: # attaches internet gateway to the vpc
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
  NatGatewayEIP:
    Type: 'AWS::EC2::EIP'
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.0.0/26'
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ''
      Tags:
        -
          Key: 'Name'
          Value: 'PublicSubnet1'
  PublicSubnetAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref CustomRouteTablePublic
      SubnetId: !Ref PublicSubnet
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.1.0/26'
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ''
      Tags:
        -
          Key: 'Name'
          Value: 'PrivateSubnet1'
  PrivateSubnetAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref CustomRouteTablePrivate
      SubnetId: !Ref PrivateSubnet          
  RouteToIgw:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet # internet gateway has to be attached to the VPC before it can be assigned to a route
    Properties:
      RouteTableId:
        Ref: CustomRouteTablePublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: InternetGateway
  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: GatewayToInternet
    Properties:
      SubnetId:
        Ref: PublicSubnet
      AllocationId:
        Fn::GetAtt:
          - NatGatewayEIP
          - AllocationId
  RouteToNatGateway:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId:
        Ref: CustomRouteTablePrivate
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId:
        Ref: NatGateway
  Ec2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      KeyName: !Ref KeyName
      ImageId: 'ami-0b59bfac6be064b78'
      InstanceType: 't3.nano'
      BlockDeviceMappings:
        -
          DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 50
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0