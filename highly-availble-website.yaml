Parameters:
  KeyName:
    Description: 'Example Key Pair'
    Type: 'AWS::EC2::KeyPair::KeyName' # example key pair is ha_website
  SshIp:
    Type: 'String'
    Default: '64.183.181.70/32'
    Description: 'Should be the users current ip address'
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: 'default'
      Tags:
        -
          Key: 'Name'
          Value: 'Highly Available Website'
  CustomRouteTablePrivate:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  CustomRouteTablePublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        Ref: VPC
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  GatewayToInternet: # attaches internet gateway to the vpc
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
  NatGatewayEIP:
    Type: 'AWS::EC2::EIP'
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.0.0/28'
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ''
      Tags:
        -
          Key: 'Name'
          Value: 'PublicSubnet1'       
  PublicSubnetAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref CustomRouteTablePublic
      SubnetId: !Ref PublicSubnet1
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.1.0/28'
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ''
      Tags:
        -
          Key: 'Name'
          Value: 'PrivateSubnet1'
  PrivateSubnetAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref CustomRouteTablePrivate
      SubnetId: !Ref PrivateSubnet1
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.2.0/28'
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ''
      Tags:
        -
          Key: 'Name'
          Value: 'PublicSubnet2'       
  PublicSubnetAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref CustomRouteTablePublic
      SubnetId: !Ref PublicSubnet2
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.3.0/28'
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ''
      Tags:
        -
          Key: 'Name'
          Value: 'PrivateSubnet2'
  PrivateSubnetAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref CustomRouteTablePrivate
      SubnetId: !Ref PrivateSubnet2          
  PublicSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.4.0/28'
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: ''
      Tags:
        -
          Key: 'Name'
          Value: 'PublicSubnet3'       
  PublicSubnetAssociation3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref CustomRouteTablePublic
      SubnetId: !Ref PublicSubnet3
  PrivateSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.5.0/28'
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: ''
      Tags:
        -
          Key: 'Name'
          Value: 'PrivateSubnet3'                      
  PrivateSubnetAssociation3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref CustomRouteTablePrivate
      SubnetId: !Ref PrivateSubnet3   
  RouteToIgw:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet # internet gateway has to be attached to the VPC before it can be assigned to a route
    Properties:
      RouteTableId:
        Ref: CustomRouteTablePublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: InternetGateway
  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: GatewayToInternet
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      AllocationId:
        Fn::GetAtt:
          - NatGatewayEIP
          - AllocationId
  RouteToNatGateway:
    Type: 'AWS::EC2::Route'
    DependsOn: NatGateway
    Properties:
      RouteTableId:
        Ref: CustomRouteTablePrivate
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId:
        Ref: NatGateway
  BastionHost: # bastion host instance
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: !Ref KeyName
      ImageId: 'ami-0b59bfac6be064b78'
      InstanceType: 't3.nano'
      BlockDeviceMappings:
        -
          DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 50
      NetworkInterfaces:
        - 
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          SubnetId: !Ref PublicSubnet1
          GroupSet:
            - 
              !Ref BastionHostSecurityGroup
      Tags:
        -
          Key: 'Name'
          Value: 'BastionHost'
  BastionHostSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SshIp
  ElasticLoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    DependsOn: GatewayToInternet
    Properties:
      LoadBalancerName: 'HALoadBalancer'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      Listeners:
        -
          LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP




















